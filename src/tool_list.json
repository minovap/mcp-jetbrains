[ {
  "name" : "get_open_in_editor_file_text",
  "description" : "Retrieves the complete text content of the currently active file in the JetBrains IDE editor.\nUse this tool to access and analyze the file's contents for tasks such as code review, content inspection, or text processing.\nReturns empty string if no file is currently open.",
  "inputSchema" : {
    "type" : "object"
  }
}, {
  "name" : "get_open_in_editor_file_path",
  "description" : "Retrieves the absolute path of the currently active file in the JetBrains IDE editor.\nUse this tool to get the file location for tasks requiring file path information.\nReturns an empty string if no file is currently open.",
  "inputSchema" : {
    "type" : "object"
  }
}, {
  "name" : "get_selected_in_editor_text",
  "description" : "\n        Retrieves the currently selected text from the active editor in JetBrains IDE.\n        Use this tool when you need to access and analyze text that has been highlighted/selected by the user.\n        Returns an empty string if no text is selected or no editor is open.\n    ",
  "inputSchema" : {
    "type" : "object"
  }
}, {
  "name" : "replace_selected_text",
  "description" : "Replaces the currently selected text in the active editor with specified new text.\nUse this tool to modify code or content by replacing the user's text selection.\nRequires a text parameter containing the replacement content.\nReturns one of three possible responses:\n    - \"ok\" if the text was successfully replaced\n    - \"no text selected\" if no text is selected or no editor is open\n    - \"unknown error\" if the operation fails",
  "inputSchema" : {
    "type" : "object",
    "properties" : {
      "text" : {
        "type" : "string"
      }
    },
    "required" : [ "text" ]
  }
}, {
  "name" : "replace_current_file_text",
  "description" : "\n        Replaces the entire content of the currently active file in the JetBrains IDE with specified new text.\n        Use this tool when you need to completely overwrite the current file's content.\n        Requires a text parameter containing the new content.\n        Returns one of three possible responses:\n        - \"ok\" if the file content was successfully replaced\n        - \"no file open\" if no editor is active\n        - \"unknown error\" if the operation fails\n    ",
  "inputSchema" : {
    "type" : "object",
    "properties" : {
      "text" : {
        "type" : "string"
      }
    },
    "required" : [ "text" ]
  }
}, {
  "name" : "create_new_file_with_text",
  "description" : "\n        Creates a new file at the specified path within the project directory and populates it with the provided text.\n        Use this tool to generate new files in your project structure.\n        Requires two parameters:\n            - pathInProject: The relative path where the file should be created\n            - text: The content to write into the new file\n        Returns one of two possible responses:\n            - \"ok\" if the file was successfully created and populated\n            - \"can't find project dir\" if the project directory cannot be determined\n        Note: Creates any necessary parent directories automatically\n    ",
  "inputSchema" : {
    "type" : "object",
    "properties" : {
      "pathInProject" : {
        "type" : "string"
      },
      "text" : {
        "type" : "string"
      }
    },
    "required" : [ "pathInProject", "text" ]
  }
}, {
  "name" : "find_files_by_name_substring",
  "description" : "\n        Searches for all files in the project whose names contain the specified substring (case-insensitive).\n        Use this tool to locate files when you know part of the filename.\n        Requires a nameSubstring parameter for the search term.\n        Returns a JSON array of objects containing file information:\n        - path: Path relative to project root\n        - name: File name\n        Returns an empty array ([]) if no matching files are found.\n        Note: Only searches through files within the project directory, excluding libraries and external dependencies.\n    ",
  "inputSchema" : {
    "type" : "object",
    "properties" : {
      "nameSubstring" : {
        "type" : "string"
      }
    },
    "required" : [ "nameSubstring" ]
  }
}, {
  "name" : "get_file_text_by_path",
  "description" : "\n        Retrieves the text content of a file using its path relative to project root.\n        Use this tool to read file contents when you have the file's project-relative path.\n        Requires a pathInProject parameter specifying the file location from project root.\n        Returns one of these responses:\n        - The file's content if the file exists and belongs to the project\n        - error \"project dir not found\" if project directory cannot be determined\n        - error \"file not found\" if the file doesn't exist or is outside project scope\n        Note: Automatically refreshes the file system before reading\n    ",
  "inputSchema" : {
    "type" : "object",
    "properties" : {
      "pathInProject" : {
        "type" : "string"
      }
    },
    "required" : [ "pathInProject" ]
  }
}, {
  "name" : "get_project_vcs_status",
  "description" : "\n        Retrieves the current version control status of files in the project.\n        Use this tool to get information about modified, added, deleted, and moved files in your VCS (e.g., Git).\n        Returns a JSON-formatted list of changed files, where each entry contains:\n        - path: The file path relative to project root\n        - type: The type of change (e.g., MODIFICATION, ADDITION, DELETION, MOVED)\n        Returns an empty list ([]) if no changes are detected or VCS is not configured.\n        Returns error \"project dir not found\" if project directory cannot be determined.\n        Note: Works with any VCS supported by the IDE, but is most commonly used with Git\n    ",
  "inputSchema" : {
    "type" : "object"
  }
}, {
  "name" : "toggle_debugger_breakpoint",
  "description" : "\n        Toggles a debugger breakpoint at the specified line in a project file.\n        Use this tool to add or remove breakpoints programmatically.\n        Requires two parameters:\n        - filePathInProject: The relative path to the file within the project\n        - line: The line number where to toggle the breakpoint. The line number is starts at 1 for the first line.\n        Returns one of two possible responses:\n        - \"ok\" if the breakpoint was successfully toggled\n        - \"can't find project dir\" if the project directory cannot be determined\n        Note: Automatically navigates to the breakpoint location in the editor\n    ",
  "inputSchema" : {
    "type" : "object",
    "properties" : {
      "filePathInProject" : {
        "type" : "string"
      },
      "line" : {
        "type" : "number"
      }
    },
    "required" : [ "filePathInProject", "line" ]
  }
}, {
  "name" : "get_debugger_breakpoints",
  "description" : "\n        Retrieves a list of all line breakpoints currently set in the project.\n        Use this tool to get information about existing debugger breakpoints.\n        Returns a JSON-formatted list of breakpoints, where each entry contains:\n        - path: The absolute file path where the breakpoint is set\n        - line: The line number (1-based) where the breakpoint is located\n        Returns an empty list ([]) if no breakpoints are set.\n        Note: Only includes line breakpoints, not other breakpoint types (e.g., method breakpoints)\n    ",
  "inputSchema" : {
    "type" : "object"
  }
}, {
  "name" : "replace_file_text_by_path",
  "description" : "\n        Replaces the entire content of a specified file with new text, if the file is within the project.\n        Use this tool to modify file contents using a path relative to the project root.\n        Requires two parameters:\n        - pathInProject: The path to the target file, relative to project root\n        - text: The new content to write to the file\n        Returns one of these responses:\n        - \"ok\" if the file was successfully updated\n        - error \"project dir not found\" if project directory cannot be determined\n        - error \"file not found\" if the file doesn't exist\n        - error \"could not get document\" if the file content cannot be accessed\n        Note: Automatically saves the file after modification\n    ",
  "inputSchema" : {
    "type" : "object",
    "properties" : {
      "pathInProject" : {
        "type" : "string"
      },
      "text" : {
        "type" : "string"
      }
    },
    "required" : [ "pathInProject", "text" ]
  }
}, {
  "name" : "list_files_in_folder",
  "description" : "Lists all files and directories in the specified project folder.\nUse this tool to explore project structure and get contents of any directory.\nRequires a pathInProject parameter (use \"/\" for project root).\nReturns a JSON-formatted list of entries, where each entry contains:\n- name: The name of the file or directory\n- type: Either \"file\" or \"directory\"\n- path: Full path relative to project root\nReturns error if the specified path doesn't exist or is outside project scope.",
  "inputSchema" : {
    "type" : "object",
    "properties" : {
      "pathInProject" : {
        "type" : "string"
      }
    },
    "required" : [ "pathInProject" ]
  }
}, {
  "name" : "search_in_files_content",
  "description" : "\n        Searches for a text substring within all files in the project using IntelliJ's search engine.\n        Use this tool to find files containing specific text content.\n        Requires a searchText parameter specifying the text to find.\n        Returns a JSON array of objects containing file information:\n        - path: Path relative to project root\n        Returns an empty array ([]) if no matches are found.\n        Note: Only searches through text files within the project directory.\n    ",
  "inputSchema" : {
    "type" : "object",
    "properties" : {
      "searchText" : {
        "type" : "string"
      }
    },
    "required" : [ "searchText" ]
  }
}, {
  "name" : "run_configuration",
  "description" : "Run a specific run configuration in the current project. Use this tool to run a run configuration that you have found from \"get_run_configurations\" tool.Returns one of two possible responses:  - \"ok\" if the run configuration was successfully executed  - \"error <error message>\" if the run configuration was not found or failed to execute",
  "inputSchema" : {
    "type" : "object",
    "properties" : {
      "configName" : {
        "type" : "string"
      }
    },
    "required" : [ "configName" ]
  }
}, {
  "name" : "get_run_configurations",
  "description" : "Returns a list of run configurations for the current project. Use this tool to query the list of available run configurations in current project.Then you shall to call \"run_configuration\" tool if you find anything relevant.Returns JSON list of run configuration names. Empty list if no run configurations found.",
  "inputSchema" : {
    "type" : "object"
  }
}, {
  "name" : "get_project_modules",
  "description" : "Get list of all modules in the project with their dependencies. Returns JSON list of module names.",
  "inputSchema" : {
    "type" : "object"
  }
}, {
  "name" : "get_project_dependencies",
  "description" : "Get list of all dependencies defined in the project. Returns JSON list of dependency names.",
  "inputSchema" : {
    "type" : "object"
  }
}, {
  "name" : "get_all_open_file_texts",
  "description" : "Returns text of all currently open files in the JetBrains IDE editor.\nReturns an empty list if no files are open.\n\nUse this tool to explore current open editors.\nReturns a JSON array of objects containing file information:\n    - path: Path relative to project root\n    - text: File text",
  "inputSchema" : {
    "type" : "object"
  }
}, {
  "name" : "get_all_open_file_paths",
  "description" : "Lists full path relative paths to project root of all currently open files in the JetBrains IDE editor.\nReturns a list of file paths that are currently open in editor tabs.\nReturns an empty list if no files are open.\n\nUse this tool to explore current open editors.\nReturns a list of file paths separated by newline symbol.",
  "inputSchema" : {
    "type" : "object"
  }
}, {
  "name" : "open_file_in_editor",
  "description" : "Opens the specified file in the JetBrains IDE editor.\nRequires a filePath parameter containing the path to the file to open.\nRequires two parameters:\n    - filePath: The path of file to open can be absolute or relative to the project root.\n    - text: The content to write into the new file\nReturns one of two possible responses:\n    - \"file is opened\" if the file was successfully created and populated\n    - \"file doesn't exist or can't be opened\" otherwise",
  "inputSchema" : {
    "type" : "object",
    "properties" : {
      "filePath" : {
        "type" : "string"
      }
    },
    "required" : [ "filePath" ]
  }
}, {
  "name" : "get_terminal_text",
  "description" : "\n        Retrieves the current text content from the first active terminal in the IDE.\n        Use this tool to access the terminal's output and command history.\n        Returns one of two possible responses:\n        - The terminal's text content if a terminal exists\n        - empty string if no terminal is open or available\n        Note: Only captures text from the first terminal if multiple terminals are open\n    ",
  "inputSchema" : {
    "type" : "object"
  }
}, {
  "name" : "execute_terminal_command",
  "description" : "\n        Executes a specified shell command in the IDE's integrated terminal.\n        Use this tool to run terminal commands within the IDE environment.\n        Requires a command parameter containing the shell command to execute.\n        Important features and limitations:\n        - Checks if process is running before collecting output\n        - Limits output to 2000 lines (truncates excess)\n        - Times out after 120000 milliseconds with notification\n        Returns possible responses:\n        - Terminal output (truncated if >2000 lines)\n        - Output with interruption notice if timed out\n        - Error messages for various failure cases\n    ",
  "inputSchema" : {
    "type" : "object",
    "properties" : {
      "command" : {
        "type" : "string"
      }
    },
    "required" : [ "command" ]
  }
}, {
  "name" : "find_commit_by_message",
  "description" : "\n        Searches for a commit based on the provided text or keywords in the project history.\n        Useful for finding specific change sets or code modifications by commit messages or diff content.\n        Takes a query parameter and returns the matching commit information.\n        Returns matched commit hashes as a JSON array.\n    ",
  "inputSchema" : {
    "type" : "object",
    "properties" : {
      "text" : {
        "type" : "string"
      }
    },
    "required" : [ "text" ]
  }
} ]